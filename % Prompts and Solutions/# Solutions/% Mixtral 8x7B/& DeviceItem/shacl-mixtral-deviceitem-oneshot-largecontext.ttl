@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix aml: <https://w3id.org/hsu-aut/AutomationML#> .
@prefix ex: <http://example.org/shapes#> .

#################################################################
##  Primary Shape: DeviceItem
#################################################################

ex:DeviceItemShape
    a sh:NodeShape ;
    # Matches any OWL individual of type "AutomationProjectConfigurationRoleClassLib%2FDeviceItem"
    sh:targetClass aml:AutomationProjectConfigurationRoleClassLib%2FDeviceItem ;

    #################################################################
    ##  1) CAEX "Name" (Mandatory)
    #################################################################
    # Whitepaper: "Name" is mandatory and is modeled by the standard CAEX Name
    sh:property [
        sh:path aml:hasName ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:message "DeviceItem must have exactly one 'Name' (CAEX object name) of type xsd:string." ;
    ] ;

    #################################################################
    ##  2) "TypeName" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:TypeNameAttributeShape ;
        sh:maxCount 1 ;           # At most one "TypeName" attribute
        sh:message "At most one 'TypeName' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ##  3) "DeviceItemType" (Optional) + Subattribute "Customized" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:DeviceItemTypeAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'DeviceItemType' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ##  4) "PositionNumber" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:PositionNumberAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'PositionNumber' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ##  5) "BuiltIn" (Optional, xs:boolean)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:BuiltInAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'BuiltIn' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ##  6) "TypeIdentifier" (Mandatory if BuiltIn=false, optional if true)
    ##     + Subattribute "TemplateIdentifier" (Optional)
    #################################################################
    # (Below we show only the basic shape for TypeIdentifier, ignoring the 
    #  advanced conditional logic about BuiltIn.)
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:TypeIdentifierAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'TypeIdentifier' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ##  7) "Manufacturer" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:ManufacturerAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'Manufacturer' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ##  8) "CustomAttributes" (ListType)[0..n] => Sub-Attributes
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:CustomAttributesShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'CustomAttributes' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ##  9) "FirmwareVersion" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:FirmwareVersionAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'FirmwareVersion' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ## 10) "Comment" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:CommentAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'Comment' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ## 11) "Address" (OrderedListType)[0..n]
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:AddressAttributeShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'Address' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ## 12) "PlantDesignation IEC" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:PlantDesignationIECShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'PlantDesignation IEC' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ## 13) "LocationIdentifier IEC" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:LocationIdentifierIECShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'LocationIdentifier IEC' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ## 14) "ProductDesignation IEC" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:ProductDesignationIECShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'ProductDesignation IEC' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ## 15) "InstallationDate" (Optional)
    #################################################################
    sh:property [
        sh:path aml:hasAttribute ;
        sh:node ex:InstallationDateShape ;
        sh:maxCount 1 ;
        sh:message "At most one 'InstallationDate' attribute is allowed on a DeviceItem." ;
    ] ;

    #################################################################
    ## 16) Interfaces
    ##     (Optional) "ModuleAssignment"
    ##     (Optional) "CommunicationPortProxyInterface"
    #################################################################
    # If present => class must be ModuleAssignment
    sh:property [
        sh:path aml:hasInterface ;
        sh:class aml:AutomationProjectConfigurationInterfaceClassLib%2FModuleAssignment ;
        sh:maxCount 1 ;
        sh:message "If present, the ModuleAssignment interface must be type 'ModuleAssignment' (maxCount 1)." ;
    ] ;

    # If present => class must be CommunicationPortProxyInterface
    sh:property [
        sh:path aml:hasInterface ;
        sh:class aml:AutomationProjectConfigurationInterfaceClassLib%2FCommunicationPortProxyInterface ;
        sh:maxCount 1 ;
        sh:message "If present, the CommunicationPortProxyInterface must be type 'CommunicationPortProxyInterface' (maxCount 1)." ;
    ] ;

    .
    
#################################################################
##  Sub-Shapes for each attribute
#################################################################

############################
## TypeName
############################
ex:TypeNameAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "TypeName" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'TypeName'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "TypeName's value must be a string." ;
    ] .

############################
## DeviceItemType + subattribute Customized
############################
ex:DeviceItemTypeAttributeShape
    a sh:NodeShape ;
    # Must have name "DeviceItemType" (if this attribute node is present)
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "DeviceItemType" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'DeviceItemType'." ;
    ] ;
    # If it has a value, it must be a string
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "DeviceItemType's value must be a string." ;
    ] ;
    # The subattribute "Customized" is optional.  If present => boolean.
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:DeviceItemTypeCustomizedShape ;
        sh:maxCount 1 ;
        sh:message "At most one subattribute 'Customized' under DeviceItemType." ;
    ] .

ex:DeviceItemTypeCustomizedShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "Customized" ;
        sh:maxCount 1 ;
        sh:message "Subattribute must be named 'Customized'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:boolean ;
        sh:maxCount 1 ;
        sh:message "Customized's value must be boolean (true/false)." ;
    ] .

############################
## PositionNumber (xs:int)
############################
ex:PositionNumberAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "PositionNumber" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'PositionNumber'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:int ;
        sh:maxCount 1 ;
        sh:message "PositionNumber's value must be an integer." ;
    ] .

############################
## BuiltIn (xs:boolean)
############################
ex:BuiltInAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "BuiltIn" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'BuiltIn'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:boolean ;
        sh:maxCount 1 ;
        sh:message "BuiltIn's value must be boolean (true/false)." ;
    ] .

############################
## TypeIdentifier + subattribute TemplateIdentifier
############################
ex:TypeIdentifierAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "TypeIdentifier" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'TypeIdentifier'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "TypeIdentifier's value must be a string." ;
    ] ;
    # TemplateIdentifier is optional
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:TemplateIdentifierShape ;
        sh:maxCount 1 ;
        sh:message "At most one subattribute 'TemplateIdentifier' under TypeIdentifier." ;
    ] .

ex:TemplateIdentifierShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "TemplateIdentifier" ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "TemplateIdentifier's value must be a string." ;
    ] .

############################
## Manufacturer (xs:string)
############################
ex:ManufacturerAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "Manufacturer" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'Manufacturer'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "Manufacturer's value must be a string." ;
    ] .

############################
## CustomAttributes (ListType)[0..n]
############################
ex:CustomAttributesShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "CustomAttributes" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'CustomAttributes'." ;
    ] ;
    # If sub-attributes exist, each must have a name (e.g. "AttributeName1") and
    # a string value.  We skip the uniqueness check here for brevity.
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:AnyCustomAttributeItemShape ;
        sh:minCount 0 ;
        sh:maxCount unbounded ;
        sh:message "CustomAttributes can contain 0..n sub-attributes." ;
    ] .

ex:AnyCustomAttributeItemShape
    a sh:NodeShape ;
    # We do not strictly require "AttributeName1", "AttributeName2"—the Whitepaper
    # states these are placeholders for the user’s arbitrary custom attributes.
    # But if it appears, it must have an xs:string value.
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "Each custom attribute's value must be a string." ;
    ] .

############################
## FirmwareVersion (xs:string)
############################
ex:FirmwareVersionAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "FirmwareVersion" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'FirmwareVersion'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "FirmwareVersion's value must be a string." ;
    ] .

############################
## Comment (xs:string)
############################
ex:CommentAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "Comment" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'Comment'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "Comment's value must be a string." ;
    ] .

############################
## Address (OrderedListType)[0..n]
############################
ex:AddressAttributeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "Address" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'Address'." ;
    ] ;
    # Each numbered sub-attribute (like "1", "2", "3"...) is a child
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:AddressListElementShape ;
        sh:minCount 0 ;
        sh:maxCount unbounded ;
        sh:message "Address can contain 0..n address elements." ;
    ] .

# For each numbered item (like "1", "2", "3"), we must check for
# StartAddress (mandatory), IoType (mandatory), Length (optional), BitOffset (optional).
ex:AddressListElementShape
    a sh:NodeShape ;
    # We skip requiring the name to be "1" or "2" etc. 
    # (In a more advanced shape, you might ensure it's numeric.)
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:StartAddressShape ;
        sh:minCount 1 ;
        sh:message "Each address element must have a 'StartAddress' sub-attribute." ;
    ] ;
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:IoTypeShape ;
        sh:minCount 1 ;
        sh:message "Each address element must have an 'IoType' sub-attribute." ;
    ] ;
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:LengthShape ;
        sh:maxCount 1 ;
        sh:message "An address element may have at most one 'Length' sub-attribute." ;
    ] ;
    sh:property [
        sh:path aml:hasPart ;
        sh:node ex:BitOffsetShape ;
        sh:maxCount 1 ;
        sh:message "An address element may have at most one 'BitOffset' sub-attribute." ;
    ] .

ex:StartAddressShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "StartAddress" ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:int ;
        sh:maxCount 1 ;
        sh:message "StartAddress must be an integer." ;
    ] .

ex:IoTypeShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "IoType" ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "IoType must be a string (e.g. 'INPUT' or 'OUTPUT')." ;
    ] .

ex:LengthShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "Length" ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:int ;
        sh:maxCount 1 ;
        sh:message "Length must be an integer if present." ;
    ] .

ex:BitOffsetShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "BitOffset" ;
        sh:maxCount 1 ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:int ;
        sh:maxCount 1 ;
        sh:message "BitOffset must be an integer if present." ;
    ] .

############################
## PlantDesignation IEC
############################
ex:PlantDesignationIECShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "PlantDesignation IEC" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'PlantDesignation IEC'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "PlantDesignation IEC must be a string." ;
    ] ;
    # Optional check of the correct RefSemantic
    sh:property [
        sh:path aml:hasSemanticRef ;
        sh:hasValue aml:IEC%2081346-1%3A2009-07%235.3%20-%20Function-oriented%20structure ;
        sh:maxCount 1 ;
        sh:message "RefSemantic should match IEC 81346-1:2009-07#5.3 (Function-oriented structure)." ;
    ] .

############################
## LocationIdentifier IEC
############################
ex:LocationIdentifierIECShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "LocationIdentifier IEC" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'LocationIdentifier IEC'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "LocationIdentifier IEC must be a string." ;
    ] ;
    # Optional check of the correct RefSemantic
    sh:property [
        sh:path aml:hasSemanticRef ;
        sh:hasValue aml:IEC%2081346-1%3A2009-07%235.5%20-%20Location-oriented%20structure ;
        sh:maxCount 1 ;
        sh:message "RefSemantic should match IEC 81346-1:2009-07#5.5 (Location-oriented structure)." ;
    ] .

############################
## ProductDesignation IEC
############################
ex:ProductDesignationIECShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "ProductDesignation IEC" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'ProductDesignation IEC'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ;
        sh:message "ProductDesignation IEC must be a string." ;
    ] ;
    # Optional check of the correct RefSemantic
    sh:property [
        sh:path aml:hasSemanticRef ;
        sh:hasValue aml:IEC%2081346-1%3A2009-07%235.4%20-%20Product-oriented%20structure ;
        sh:maxCount 1 ;
        sh:message "RefSemantic should match IEC 81346-1:2009-07#5.4 (Product-oriented structure)." ;
    ] .

############################
## InstallationDate (xs:dateTime)
############################
ex:InstallationDateShape
    a sh:NodeShape ;
    sh:property [
        sh:path aml:hasName ;
        sh:hasValue "InstallationDate" ;
        sh:maxCount 1 ;
        sh:message "Attribute must be named 'InstallationDate'." ;
    ] ;
    sh:property [
        sh:path aml:hasAttributeValue ;
        sh:datatype xsd:dateTime ;
        sh:maxCount 1 ;
        sh:message "InstallationDate must be a dateTime value." ;
    ] .
