# DeviceItem

A “DeviceItem” is derived from a “PhysicalDevice” according to AutomationML Whitepaper -
Communication. It is defined as follows.

## Table 6 – Definition DeviceItem

### Role class name: DeviceItem

### Description: The role class “DeviceItem” shall be used in order to represent a general object class for
HW modules and submodules.

### Parent Class: CommunicationRoleClassLib/PhysicalDevice

### Path for Element reference: AutomationProjectConfigurationRoleClassLib/DeviceItem

### Attributes:

“Name” (AttributeDataType=”xs:string”):
The attribute “Name” defines the name of the
DeviceItem.
This attribute is mandatory.
Note: This attribute is modelled by the
standard attribute Name of the relevant CAEX
object.

“TypeName” (AttributeDataType=”xs:string”):
The Attribute “TypeName” defines additional
type information.
This attribute is optional.

“DeviceItemType” (AttributeDataType=”xs:string”); “Customized” (AttributeDataType=”xs:boolean”):
The attribute “DeviceItemType” defines the
classification of the DeviceItem.
This attribute is optional.
The subattribute “Customized” indicates if the
DeviceItemType contains vendor specific
information (Customized = “true”) or not
(Customized =”false”). If customized is omitted or
set to “false” the DeviceItem contains already
standardized information (Standard values are:
CPU, HeadModule, Accessory).
This attribute is optional.

“PositionNumber” (AttributeDataType=”xs:int”):
The attribute “PositionNumber” defines the slot
number where this DeviceItem is plugged in.
This attribute is optional. It is mandatory in
case of plugable DeviceItems and for
DeviceItems which can contain plugable
DeviceItems

“BuiltIn” (AttributeDataType=”xs:boolean”):
The attribute “BuiltIn” defines that this module
is a build-in part of another module.
This attribute is optional.
The default value is “false”.

“TypeIdentifier” (AttributeDataType=”xs:string”); “TemplateIdentifier” (AttributeDataType=”xs:string”):
The attribute “TypeIdentifier” defines the
identifier of the DeviceItem type.
This attribute is mandatory if “BuiltIn” is “false”.
The attribute is optional, if “BuiltIn” is true.
A wildcard shall be “*”.
The attribute “TemplateIdentifier” references
the path of a template element, for instance a
library. The syntax is defined by the
corresponding target system element. This
attribute is optional.

“Manufacturer” (AttributeDataType=”xs:string”):
The attribute “Manufacturer” defines the
manufacturer of the DeviceItem. The name of
the manufacturer must be unambiguous and
unique assigned to the manufacturer.
This attribute is optional.

“CustomAttributes” (ListType)[0..n];  “AttributeName” (AttributeDataType=”xs:string”):
The name of the
CustomAttribute defines
the property name in the
target system. The value
defines the value of this
CustomAttribute. The
AttributeName is
mandatory if the attribute
“CustomAttributes” exists.
The AttributeName shall
be unique. Mapping of
several custom attributes
with the same name can
only be made by making
the key unique by
appending a counter like
#1, #2, #3. Custom
Attributes can have
simple or complex data
types. The description of
complex values can be
found in 5.3.

“FirmwareVersion” (AttributeDataType=”xs:string”):
The attribute “FirmwareVersion” defines the
firmware version of e.g. a CPU to identify the
module correctly.
This attribute is optional.

“Comment” (AttributeDataType=”xs:string”):
The attribute “Comment” defines a comment
for the DeviceItem. The attribute “Comment”
follows the Best Practice Recommendation
Multilingual expressions in AutomationML.
This attribute is optional.

“Address” (OrderedListType)[0..n]; “1”:
“StartAddress” (AttributeDataType=”xs:int”):
The attribute “Address” is
optional. The subattribute
“StartAddress” defines
the start of the address.
The subattribute
“StartAddress” is
mandatory if the attribute
“Address” exists.
“Length” (AttributeDataType=”xs:int”):
The attribute “Length”
defines the total width of
all of the channels on the
device item.
This attribute is optional.
“IoType” (AttributeDataType=”xs:string”):
The attribute “IoType”
specifies the direction
INPUT or OUTPUT.
The subattribute “IoType”
is mandatory if the
attribute “Address” exists.
“BitOffset” (AttributeDataType=”xsint)”:
The subattribute
“BitOffset” defines the
offset within a
StartAddress.
The subattribute
“BitOffset” is optional.
The default value is “0”.

“PlantDesignation IEC” (AttributeDataType=” xs:string” and RefSemantic=” IEC 81346-1:2009-07#5.3 - Function-oriented structure IEC81346”):
The attribute “PlantDesignation IEC” defines
the function designation for this device item
according IEC81346. The attribute shall
contain in the subattribute refSemantic the
value “IEC 81346-1:2009-07#5.3 - Functionoriented structure” to enable its identification if
the name is changed. The length of this
attribute is bus specific.
This attribute is optional.

“LocationIdentifier IEC” (AttributeDataType=” xs:string” and RefSemantic=” IEC 81346-1:2009-07#5.5 - Location-oriented structure IEC81346”):
The attribute “LocationIdentifier IEC” defines
the location designation for this device item
according IEC81346. The attribute shall
contain in the subattribute refSemantic the
value “IEC 81346-1:2009-07#5.5 - Locationoriented structure” to enable its identification if
the name is changed. The length of this
attribute is bus specific.
This attribute is optional.

“ProductDesignation IEC” (AttributeDataType=” xs:string” and RefSemantic=” IEC 81346-1:2009-07#5.4 - Product-oriented structure”):
The attribute “ProductDesignation IEC” defines
the product designation for this device item
according IEC81346. The attribute shall
contain in the subattribute refSemantic the
value “IEC 81346-1:2009-07#5.4 - Productoriented structure” to enable its identification if
the name is changed. The length of this
attribute is bus specific.
This attribute is optional.

“InstallationDate” (AttributeDataType=” xs:dateTime):
The attribute “InstallationDate” defines the
date of the installation of the DeviceItem.
This attribute is optional.

### Interfaces:

“ModuleAssignment” (RefBaseClassePath=”AutomationProjectConfigurationInterfaceClassLib/ModuleAssignment”):
This interface is used to link a module to a
CPU in case of multiple CPU
configurations.The direction of the link is
irrelevant.

“CommunicationPortProxyInterface” (RefBaseClassePath=”AutomationProjectConfigurationInterfaceClassLib/CommunicationPortProxyInterface”):
This interface is used to manage
CommunicationPorts of pluggable DeviceItems
at the DeviceItem where they are plugged. The
actual CommunicationPort is modelled at the
'parent' DeviceItem and the relation to the
pluggable DeviceItem is introduced by linking
the respective DeviceItems with the
CommunicationPortProxyInterface. The
direction of the link is irrelevant.
A CommunicationPort can be connected at
maximum to one DeviceItem.


Note: The Address attribute is a finite list of variable length. The number of list elements is application
case dependent.

Note: The attribute “TypeIdentifier” has a prefix which describes the semantic of the following identifier
separated by “:” The following prefixes are allowed: “OrderNumber”, “GSD”, "System", “CSP+”.

Examples:
TypeIdentifier = “OrderNumber:3RK1 200-0CE00-0AA2”
TypeIdentifier = “GSD:SIEM8139.GSD/DAP/DAP 1”
TypeIdentifier = "System:Rack.Generic”
TypeIdentifier = “CSP+:AJ65VBTCE2-8T”
TemplateIdentifier =
" GlobalLib://TemplateLibrary/Master copies/S7-1500/preconfigured/DIs/16x24VDC BA_Advanced”

Note:
If BuildIn=true then the identification shall result from the UUID of the first DeviceItem in the parent
hierarchy with BuiltIn=False and the Position-Number of the DeviceItem.

Note:
ECAD and Automation Engineering Systems have different perspectives on the structure of devices and
modules. An exchanged AML file must ensure that both perspectives can be derived from an its content.
Two scenarios have to be distinguished:
• A device or module is composed of two device items. The two device items appear in an
automation engineering system at the same level but the second is modelled as part of the first
one (main device item). In the ECAD system the composition of the two device items is treated
as one module. (hierarchical scenario)
• A device or module is modelled by independent artifacts in the automation system while it is
handled as a single physical entity in the ECAD system. This is often used to model various
configurations of the same module / device. (flat scenario)

Both scenarios can be handled by using the product administration of the ECAD system. For this aim
the ECAD system uses one of the two defined properties on device items, which are handled as built-in
by the ECAD system:
• GSD-index
• sub-module order number
At least one property has to be defined. If both are given, sub-module order number takes preference
over GSD-index. The actual names of these properties are ECAD system specific. They are reflected in
the value of type identifier attribute of the corresponding built-in device item.
For the flat scenario for all device items the value of its type identifier is used. For the hierarchical
scenario the main device item uses the value of its type identifier while the built-in device item uses the
type identifier of the main device item appended with “#BUILTIN” as value for sub-module order number.

An ECAD export algorithm shall work as follows:
• If no property is defined for the built-in device item, it will be exported from the ECAD system as
child of the main device item (hierarchical model)
• If at least one property is defined, the built-in device item will be exported at the level of the main
device. Built-in device items shall always be positioned following the main device item. If the
order number possesses “#BUILTIN” as part of its order number for the device item, the built-in
flag will be set in the AML file.

In case of the flat scenario, PLC engineering systems must export the corresponding type identifier
value for each device item. For the hierarchical scenario for the main device item its type identifier value
is exported, while for the built-in device item the value of the main device item’s type identifier value
appended with with “#BUILTIN” is exported.

Remarks:
• Version information of built-in devices will be ignored during import. The importing system may
issue a warning.
Depending on the different communication systems and bus systems some DeviceItems may contain
additional, unused or restricted attributes. These attributes and the bus specific parameters are
described in separate bus specifications. Please refer to these bus specifications for more information.